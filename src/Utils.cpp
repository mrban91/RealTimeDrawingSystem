
#include "Utils.h"
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <vector>
#include <fstream>
#include <queue>
#include <algorithm>


using namespace cv;
using namespace std;

Utils::Utils() {
}

Utils::Utils(const Utils& orig) {
}

Utils::~Utils() {
}

/**
 * Return the indexes of the first  num biggets values contained in values.
 * 
 * @param values Vector of the vlaues
 * @param num Number of values to be returned
 * @return the indexes of the first  num biggets values contained in values
 * 
 */
vector<int> Utils::getBiggest(vector<double> values, int num) {

    priority_queue<pair<double, int> > q;
    int vi, ki;
    vector<int> idx;
    if (num > values.size()) {
        for (int i = 0; i < values.size(); i++)
            idx.push_back(i);
        return idx;
    }
    
    for (int i = 0; i < values.size(); ++i)
        q.push(pair<double, int>(values[i], i));

    for (int i = 0; i < num; ++i) {
        ki = q.top().second;
        vi = q.top().first;
        idx.push_back(ki);
        q.pop();  
    }
    return idx;
}


/**
 * Method that checks if a button has been pressed by checking the values of Input 
 * which is a Mat computed as the hand of the roi of the hand and the Mat representing the buttons
 * The method check the uniques values inside the Mat and if there are only two:
 * -0
 * - code of one button
 * 
 * 
 * @param input Input image
 * @param codeButton Code of the pressed button  [= -1 if no button ore manu has been pressed]
 * @param areaPressed Area of the button that has been pressed [= -1 if no button or many has been pressed]
 * @param toSort Not used -> usefull if the last part of the function (commented) is used
 * @return the button code and the area of pression
 */
void Utils::uniqueValues(Mat& input, int &codeButton , int &areaPressed) { 

    int idx, v;
    vector<int> values, occurencies;
    vector<int>::iterator iter;

    for (int y = 0; y < input.rows; ++y) {
        for (int x = 0; x < input.cols; ++x) {
            v = (int) input.at<uchar>(y, x);
            iter = find(values.begin(), values.end(), v);
            if (iter == values.end()) {
                values.push_back(v);
                occurencies.push_back(1);
            } else {
                idx = distance(values.begin(), iter);
                occurencies[idx] = occurencies[idx] + 1;
            }
        }
    }

    if (values.size() == 2) { // if the size is bigger it mean that multiple buttons have been pressed (no safe selection)
        iter = find(values.begin(), values.end(), 0);
        if (iter == values.end()) {
            codeButton = -1;
            areaPressed = -1;
            return;
        }
        iter = upper_bound(values.begin(), values.end(), 1);
        idx = distance(values.begin(), iter);
        codeButton = values[idx];
        areaPressed = occurencies[idx];
    } else {
        codeButton = -1;
        areaPressed = -1;
        return;
    }
}
/**
 * Applies a filter in order to remove artifacts generated by movements or vibrations
 * @param input colored draw to be filtered
 */
void Utils::applyFilter(Mat& input) {
    Mat temp, channel[3], mask;
    bilateralFilter(input, temp, 40, 160, 160);
    input = temp.clone();
    split(input, channel);
    threshold(channel[0], channel[0], 15, 0, THRESH_TOZERO);
    threshold(channel[1], channel[1], 15, 0, THRESH_TOZERO);
    threshold(channel[2], channel[2], 15, 0, THRESH_TOZERO);
    merge(channel, 3, input);
}

